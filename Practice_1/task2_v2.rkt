; ========= Task 2 =========
(define (func a b) ; процедура вывода чисел в порядке возростания/убывания
  (display a) ; вывод числа
  (display " ")
  (cond ((> a b) ; если а больше b
        (func (- a 1) b)) ; вызов рекурсии в порядке убывания
        ((< a b) ; если a меньше b
         (func (+ a 1) b)))) ; вызов рекурсии в порядке возрастания

(func 7 3) ; вызов процедуры

; ========= Task 1 =========
(define (fact n) ; процедура нахождения факториала числа
  (if (= n 0) ; базовое условие: если n=0, то вернуть 1
      1
      (* n (fact (- n 1))))) ; вызов рекурсии

(define (comb n k) ; процедура нахождения кол-ва комбинаций
  (cond ((or (and (= n k) (> n 0)) (and (= k 0) (< n 0))) ; при выполнении данного условия вернуть 1
         1)
         ((and (> n 0) (> n k)) ; при выполнении данного условия рассчитать комбинацию
          (/ (fact n) (* (fact k) (fact (- n k))))) ; вызов рекрсии
         (else 0)
         )
  )

;(comb 10 2) ; вызов процедуры